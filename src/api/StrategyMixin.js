//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

StrategyMixin_getContext_args = function(args) {
};
StrategyMixin_getContext_args.prototype = {};
StrategyMixin_getContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_getContext_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_getContext_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_getContext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
StrategyMixin_getContext_result.prototype = {};
StrategyMixin_getContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StrategyContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_getContext_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_getContext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_buy_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.priceType = null;
  this.tradeType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
  }
};
StrategyMixin_buy_args.prototype = {};
StrategyMixin_buy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_buy_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_buy_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 4);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_buy_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_buy_result.prototype = {};
StrategyMixin_buy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_buy_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_buy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_sell_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.priceType = null;
  this.tradeType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
  }
};
StrategyMixin_sell_args.prototype = {};
StrategyMixin_sell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_sell_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_sell_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 4);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_sell_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_sell_result.prototype = {};
StrategyMixin_sell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_sell_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_sell_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_sellToday_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.priceType = null;
  this.tradeType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
  }
};
StrategyMixin_sellToday_args.prototype = {};
StrategyMixin_sellToday_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_sellToday_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_sellToday_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 4);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_sellToday_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_sellToday_result.prototype = {};
StrategyMixin_sellToday_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_sellToday_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_sellToday_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_short_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.priceType = null;
  this.tradeType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
  }
};
StrategyMixin_short_args.prototype = {};
StrategyMixin_short_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_short_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_short_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 4);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_short_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_short_result.prototype = {};
StrategyMixin_short_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_short_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_short_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_cover_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.priceType = null;
  this.tradeType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
  }
};
StrategyMixin_cover_args.prototype = {};
StrategyMixin_cover_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_cover_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_cover_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 4);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_cover_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_cover_result.prototype = {};
StrategyMixin_cover_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_cover_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_cover_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_coverToday_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.priceType = null;
  this.tradeType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
  }
};
StrategyMixin_coverToday_args.prototype = {};
StrategyMixin_coverToday_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_coverToday_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_coverToday_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 4);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_coverToday_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_coverToday_result.prototype = {};
StrategyMixin_coverToday_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_coverToday_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_coverToday_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_cancelOrder_args = function(args) {
  this.orderID = null;
  if (args) {
    if (args.orderID !== undefined) {
      this.orderID = args.orderID;
    }
  }
};
StrategyMixin_cancelOrder_args.prototype = {};
StrategyMixin_cancelOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_cancelOrder_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_cancelOrder_args');
  if (this.orderID !== null && this.orderID !== undefined) {
    output.writeFieldBegin('orderID', Thrift.Type.STRING, 1);
    output.writeString(this.orderID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_cancelOrder_result = function(args) {
  this.success = null;
  this.OrderException = null;
  if (args instanceof OrderException) {
    this.OrderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.OrderException !== undefined) {
      this.OrderException = args.OrderException;
    }
  }
};
StrategyMixin_cancelOrder_result.prototype = {};
StrategyMixin_cancelOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OrderResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.OrderException = new OrderException();
        this.OrderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_cancelOrder_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_cancelOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.OrderException !== null && this.OrderException !== undefined) {
    output.writeFieldBegin('OrderException', Thrift.Type.STRUCT, 1);
    this.OrderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_subscribe_args = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
  }
};
StrategyMixin_subscribe_args.prototype = {};
StrategyMixin_subscribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_subscribe_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_subscribe_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_subscribe_result = function(args) {
  this.e = null;
  if (args instanceof SubscribeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StrategyMixin_subscribe_result.prototype = {};
StrategyMixin_subscribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new SubscribeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_subscribe_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_subscribe_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_unSubscribe_args = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
  }
};
StrategyMixin_unSubscribe_args.prototype = {};
StrategyMixin_unSubscribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_unSubscribe_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_unSubscribe_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_unSubscribe_result = function(args) {
  this.e = null;
  if (args instanceof SubscribeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StrategyMixin_unSubscribe_result.prototype = {};
StrategyMixin_unSubscribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new SubscribeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_unSubscribe_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_unSubscribe_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_schedule_args = function(args) {
  this.period = null;
  this.time = null;
  if (args) {
    if (args.period !== undefined) {
      this.period = args.period;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
  }
};
StrategyMixin_schedule_args.prototype = {};
StrategyMixin_schedule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.period = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_schedule_args.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_schedule_args');
  if (this.period !== null && this.period !== undefined) {
    output.writeFieldBegin('period', Thrift.Type.STRING, 1);
    output.writeString(this.period);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 2);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixin_schedule_result = function(args) {
};
StrategyMixin_schedule_result.prototype = {};
StrategyMixin_schedule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyMixin_schedule_result.prototype.write = function(output) {
  output.writeStructBegin('StrategyMixin_schedule_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyMixinClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
StrategyMixinClient.prototype = {};
StrategyMixinClient.prototype.getContext = function() {
  this.send_getContext();
  return this.recv_getContext();
};

StrategyMixinClient.prototype.send_getContext = function() {
  this.output.writeMessageBegin('getContext', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_getContext_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_getContext = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_getContext_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getContext failed: unknown result';
};
StrategyMixinClient.prototype.buy = function(symbol, price, volume, priceType, tradeType) {
  this.send_buy(symbol, price, volume, priceType, tradeType);
  return this.recv_buy();
};

StrategyMixinClient.prototype.send_buy = function(symbol, price, volume, priceType, tradeType) {
  this.output.writeMessageBegin('buy', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_buy_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.priceType = priceType;
  args.tradeType = tradeType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_buy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_buy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'buy failed: unknown result';
};
StrategyMixinClient.prototype.sell = function(symbol, price, volume, priceType, tradeType) {
  this.send_sell(symbol, price, volume, priceType, tradeType);
  return this.recv_sell();
};

StrategyMixinClient.prototype.send_sell = function(symbol, price, volume, priceType, tradeType) {
  this.output.writeMessageBegin('sell', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_sell_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.priceType = priceType;
  args.tradeType = tradeType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_sell = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_sell_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sell failed: unknown result';
};
StrategyMixinClient.prototype.sellToday = function(symbol, price, volume, priceType, tradeType) {
  this.send_sellToday(symbol, price, volume, priceType, tradeType);
  return this.recv_sellToday();
};

StrategyMixinClient.prototype.send_sellToday = function(symbol, price, volume, priceType, tradeType) {
  this.output.writeMessageBegin('sellToday', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_sellToday_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.priceType = priceType;
  args.tradeType = tradeType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_sellToday = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_sellToday_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sellToday failed: unknown result';
};
StrategyMixinClient.prototype.short = function(symbol, price, volume, priceType, tradeType) {
  this.send_short(symbol, price, volume, priceType, tradeType);
  return this.recv_short();
};

StrategyMixinClient.prototype.send_short = function(symbol, price, volume, priceType, tradeType) {
  this.output.writeMessageBegin('short', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_short_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.priceType = priceType;
  args.tradeType = tradeType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_short = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_short_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'short failed: unknown result';
};
StrategyMixinClient.prototype.cover = function(symbol, price, volume, priceType, tradeType) {
  this.send_cover(symbol, price, volume, priceType, tradeType);
  return this.recv_cover();
};

StrategyMixinClient.prototype.send_cover = function(symbol, price, volume, priceType, tradeType) {
  this.output.writeMessageBegin('cover', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_cover_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.priceType = priceType;
  args.tradeType = tradeType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_cover = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_cover_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'cover failed: unknown result';
};
StrategyMixinClient.prototype.coverToday = function(symbol, price, volume, priceType, tradeType) {
  this.send_coverToday(symbol, price, volume, priceType, tradeType);
  return this.recv_coverToday();
};

StrategyMixinClient.prototype.send_coverToday = function(symbol, price, volume, priceType, tradeType) {
  this.output.writeMessageBegin('coverToday', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_coverToday_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.priceType = priceType;
  args.tradeType = tradeType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_coverToday = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_coverToday_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'coverToday failed: unknown result';
};
StrategyMixinClient.prototype.cancelOrder = function(orderID) {
  this.send_cancelOrder(orderID);
  return this.recv_cancelOrder();
};

StrategyMixinClient.prototype.send_cancelOrder = function(orderID) {
  this.output.writeMessageBegin('cancelOrder', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_cancelOrder_args();
  args.orderID = orderID;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_cancelOrder = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_cancelOrder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.OrderException) {
    throw result.OrderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'cancelOrder failed: unknown result';
};
StrategyMixinClient.prototype.subscribe = function(symbol) {
  this.send_subscribe(symbol);
  this.recv_subscribe();
};

StrategyMixinClient.prototype.send_subscribe = function(symbol) {
  this.output.writeMessageBegin('subscribe', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_subscribe_args();
  args.symbol = symbol;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_subscribe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_subscribe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StrategyMixinClient.prototype.unSubscribe = function(symbol) {
  this.send_unSubscribe(symbol);
  this.recv_unSubscribe();
};

StrategyMixinClient.prototype.send_unSubscribe = function(symbol) {
  this.output.writeMessageBegin('unSubscribe', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_unSubscribe_args();
  args.symbol = symbol;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_unSubscribe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_unSubscribe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
StrategyMixinClient.prototype.schedule = function(period, time) {
  this.send_schedule(period, time);
  this.recv_schedule();
};

StrategyMixinClient.prototype.send_schedule = function(period, time) {
  this.output.writeMessageBegin('schedule', Thrift.MessageType.CALL, this.seqid);
  var args = new StrategyMixin_schedule_args();
  args.period = period;
  args.time = time;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyMixinClient.prototype.recv_schedule = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StrategyMixin_schedule_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
