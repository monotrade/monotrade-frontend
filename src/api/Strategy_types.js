//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


OrderResultType = {
'SUCCESSFUL' : 0,
'UNSUFFICIENT' : 1,
'RISKFUL' : 2,
'OTHERS' : 99
};
StrategyContext = function(args) {
};
StrategyContext.prototype = {};
StrategyContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StrategyContext.prototype.write = function(output) {
  output.writeStructBegin('StrategyContext');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderResult = function(args) {
  this.resultType = null;
  this.orderID = null;
  this.externalID = null;
  this.message = null;
  if (args) {
    if (args.resultType !== undefined) {
      this.resultType = args.resultType;
    }
    if (args.orderID !== undefined) {
      this.orderID = args.orderID;
    }
    if (args.externalID !== undefined) {
      this.externalID = args.externalID;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
OrderResult.prototype = {};
OrderResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.resultType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.orderID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.externalID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderResult.prototype.write = function(output) {
  output.writeStructBegin('OrderResult');
  if (this.resultType !== null && this.resultType !== undefined) {
    output.writeFieldBegin('resultType', Thrift.Type.I32, 1);
    output.writeI32(this.resultType);
    output.writeFieldEnd();
  }
  if (this.orderID !== null && this.orderID !== undefined) {
    output.writeFieldBegin('orderID', Thrift.Type.STRING, 2);
    output.writeString(this.orderID);
    output.writeFieldEnd();
  }
  if (this.externalID !== null && this.externalID !== undefined) {
    output.writeFieldBegin('externalID', Thrift.Type.STRING, 3);
    output.writeString(this.externalID);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

