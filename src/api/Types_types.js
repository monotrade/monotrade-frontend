//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TradeType = {
'NORMAL' : 1,
'HEDGING' : 4,
'ARBITRAGE' : 8,
'COVERED' : 16
};
PriceType = {
'LMT' : 0,
'BOC' : 1,
'BOP' : 2,
'ITC' : 3,
'B5TC' : 4,
'FOK' : 5,
'B5TL' : 6,
'ALO' : 7,
'ACO' : 8,
'ELO' : 9,
'SLO' : 10,
'FOK_LMT' : 11,
'EXE' : 12,
'MTL' : 13
};
Exchange = function(args) {
  this.name = null;
  this.code = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
  }
};
Exchange.prototype = {};
Exchange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Exchange.prototype.write = function(output) {
  output.writeStructBegin('Exchange');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tick = function(args) {
  this.symbol = null;
  this.timestamp = null;
  this.preClosePrice = null;
  this.price = null;
  this.openPrice = null;
  this.highPrice = null;
  this.lowPrice = null;
  this.ask_prices = null;
  this.ask_volumes = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.preClosePrice !== undefined) {
      this.preClosePrice = args.preClosePrice;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.openPrice !== undefined) {
      this.openPrice = args.openPrice;
    }
    if (args.highPrice !== undefined) {
      this.highPrice = args.highPrice;
    }
    if (args.lowPrice !== undefined) {
      this.lowPrice = args.lowPrice;
    }
    if (args.ask_prices !== undefined) {
      this.ask_prices = args.ask_prices;
    }
    if (args.ask_volumes !== undefined) {
      this.ask_volumes = args.ask_volumes;
    }
  }
};
Tick.prototype = {};
Tick.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.preClosePrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.openPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.highPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ask_prices = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readDouble().value;
          this.ask_prices.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.ask_volumes = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32().value;
          this.ask_volumes.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tick.prototype.write = function(output) {
  output.writeStructBegin('Tick');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.preClosePrice !== null && this.preClosePrice !== undefined) {
    output.writeFieldBegin('preClosePrice', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.preClosePrice);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.openPrice !== null && this.openPrice !== undefined) {
    output.writeFieldBegin('openPrice', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.openPrice);
    output.writeFieldEnd();
  }
  if (this.highPrice !== null && this.highPrice !== undefined) {
    output.writeFieldBegin('highPrice', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.highPrice);
    output.writeFieldEnd();
  }
  if (this.lowPrice !== null && this.lowPrice !== undefined) {
    output.writeFieldBegin('lowPrice', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.lowPrice);
    output.writeFieldEnd();
  }
  if (this.ask_prices !== null && this.ask_prices !== undefined) {
    output.writeFieldBegin('ask_prices', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.DOUBLE, this.ask_prices.length);
    for (var iter14 in this.ask_prices)
    {
      if (this.ask_prices.hasOwnProperty(iter14))
      {
        iter14 = this.ask_prices[iter14];
        output.writeDouble(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ask_volumes !== null && this.ask_volumes !== undefined) {
    output.writeFieldBegin('ask_volumes', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.I32, this.ask_volumes.length);
    for (var iter15 in this.ask_volumes)
    {
      if (this.ask_volumes.hasOwnProperty(iter15))
      {
        iter15 = this.ask_volumes[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Bar = function(args) {
  this.symbol = null;
  this.timestamp = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
Bar.prototype = {};
Bar.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bar.prototype.write = function(output) {
  output.writeStructBegin('Bar');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Trade = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
  }
};
Trade.prototype = {};
Trade.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Trade.prototype.write = function(output) {
  output.writeStructBegin('Trade');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Position = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
  }
};
Position.prototype = {};
Position.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Position.prototype.write = function(output) {
  output.writeStructBegin('Position');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Portfolio = function(args) {
};
Portfolio.prototype = {};
Portfolio.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Portfolio.prototype.write = function(output) {
  output.writeStructBegin('Portfolio');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Account = function(args) {
};
Account.prototype = {};
Account.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Account.prototype.write = function(output) {
  output.writeStructBegin('Account');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Order = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transaction = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

