//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Strategy_initialize_args = function(args) {
};
Strategy_initialize_args.prototype = {};
Strategy_initialize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_initialize_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_initialize_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_initialize_result = function(args) {
};
Strategy_initialize_result.prototype = {};
Strategy_initialize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_initialize_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_initialize_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_start_args = function(args) {
};
Strategy_start_args.prototype = {};
Strategy_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_start_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_start_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_start_result = function(args) {
};
Strategy_start_result.prototype = {};
Strategy_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_start_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_start_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_stop_args = function(args) {
};
Strategy_stop_args.prototype = {};
Strategy_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_stop_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_stop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_stop_result = function(args) {
};
Strategy_stop_result.prototype = {};
Strategy_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_stop_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_stop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onSchedule_args = function(args) {
  this.data_rule = null;
  this.timeRule = null;
  if (args) {
    if (args.data_rule !== undefined) {
      this.data_rule = args.data_rule;
    }
    if (args.timeRule !== undefined) {
      this.timeRule = args.timeRule;
    }
  }
};
Strategy_onSchedule_args.prototype = {};
Strategy_onSchedule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data_rule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.timeRule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onSchedule_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onSchedule_args');
  if (this.data_rule !== null && this.data_rule !== undefined) {
    output.writeFieldBegin('data_rule', Thrift.Type.STRING, 1);
    output.writeString(this.data_rule);
    output.writeFieldEnd();
  }
  if (this.timeRule !== null && this.timeRule !== undefined) {
    output.writeFieldBegin('timeRule', Thrift.Type.STRING, 2);
    output.writeString(this.timeRule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onSchedule_result = function(args) {
};
Strategy_onSchedule_result.prototype = {};
Strategy_onSchedule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onSchedule_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onSchedule_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onTick_args = function(args) {
  this.tick = null;
  if (args) {
    if (args.tick !== undefined) {
      this.tick = args.tick;
    }
  }
};
Strategy_onTick_args.prototype = {};
Strategy_onTick_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tick = new Tick();
        this.tick.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onTick_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onTick_args');
  if (this.tick !== null && this.tick !== undefined) {
    output.writeFieldBegin('tick', Thrift.Type.STRUCT, 1);
    this.tick.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onTick_result = function(args) {
};
Strategy_onTick_result.prototype = {};
Strategy_onTick_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onTick_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onTick_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onBar_args = function(args) {
  this.bar = null;
  if (args) {
    if (args.bar !== undefined) {
      this.bar = args.bar;
    }
  }
};
Strategy_onBar_args.prototype = {};
Strategy_onBar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bar = new Bar();
        this.bar.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onBar_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onBar_args');
  if (this.bar !== null && this.bar !== undefined) {
    output.writeFieldBegin('bar', Thrift.Type.STRUCT, 1);
    this.bar.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onBar_result = function(args) {
};
Strategy_onBar_result.prototype = {};
Strategy_onBar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onBar_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onBar_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onTrade_args = function(args) {
  this.trade = null;
  if (args) {
    if (args.trade !== undefined) {
      this.trade = args.trade;
    }
  }
};
Strategy_onTrade_args.prototype = {};
Strategy_onTrade_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.trade = new Trade();
        this.trade.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onTrade_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onTrade_args');
  if (this.trade !== null && this.trade !== undefined) {
    output.writeFieldBegin('trade', Thrift.Type.STRUCT, 1);
    this.trade.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onTrade_result = function(args) {
};
Strategy_onTrade_result.prototype = {};
Strategy_onTrade_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onTrade_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onTrade_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onPosition_args = function(args) {
  this.position = null;
  if (args) {
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
Strategy_onPosition_args.prototype = {};
Strategy_onPosition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.position = new Position();
        this.position.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onPosition_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onPosition_args');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRUCT, 1);
    this.position.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onPosition_result = function(args) {
};
Strategy_onPosition_result.prototype = {};
Strategy_onPosition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onPosition_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onPosition_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onAccount_args = function(args) {
  this.accountStatus = null;
  if (args) {
    if (args.accountStatus !== undefined) {
      this.accountStatus = args.accountStatus;
    }
  }
};
Strategy_onAccount_args.prototype = {};
Strategy_onAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.accountStatus = new Account();
        this.accountStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onAccount_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onAccount_args');
  if (this.accountStatus !== null && this.accountStatus !== undefined) {
    output.writeFieldBegin('accountStatus', Thrift.Type.STRUCT, 1);
    this.accountStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onAccount_result = function(args) {
};
Strategy_onAccount_result.prototype = {};
Strategy_onAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onAccount_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onAccount_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onOrder_args = function(args) {
  this.orderStatus = null;
  if (args) {
    if (args.orderStatus !== undefined) {
      this.orderStatus = args.orderStatus;
    }
  }
};
Strategy_onOrder_args.prototype = {};
Strategy_onOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.orderStatus = new Order();
        this.orderStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onOrder_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onOrder_args');
  if (this.orderStatus !== null && this.orderStatus !== undefined) {
    output.writeFieldBegin('orderStatus', Thrift.Type.STRUCT, 1);
    this.orderStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onOrder_result = function(args) {
};
Strategy_onOrder_result.prototype = {};
Strategy_onOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onOrder_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onOrder_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onError_args = function(args) {
};
Strategy_onError_args.prototype = {};
Strategy_onError_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onError_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onError_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onError_result = function(args) {
};
Strategy_onError_result.prototype = {};
Strategy_onError_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onError_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onError_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onParameter_args = function(args) {
};
Strategy_onParameter_args.prototype = {};
Strategy_onParameter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onParameter_args.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onParameter_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Strategy_onParameter_result = function(args) {
};
Strategy_onParameter_result.prototype = {};
Strategy_onParameter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Strategy_onParameter_result.prototype.write = function(output) {
  output.writeStructBegin('Strategy_onParameter_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StrategyClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
StrategyClient.prototype = {};
StrategyClient.prototype.initialize = function() {
  this.send_initialize();
  this.recv_initialize();
};

StrategyClient.prototype.send_initialize = function() {
  this.output.writeMessageBegin('initialize', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_initialize_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_initialize = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_initialize_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.start = function() {
  this.send_start();
  this.recv_start();
};

StrategyClient.prototype.send_start = function() {
  this.output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_start_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_start = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_start_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.stop = function() {
  this.send_stop();
  this.recv_stop();
};

StrategyClient.prototype.send_stop = function() {
  this.output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_stop_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_stop = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_stop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onSchedule = function(data_rule, timeRule) {
  this.send_onSchedule(data_rule, timeRule);
  this.recv_onSchedule();
};

StrategyClient.prototype.send_onSchedule = function(data_rule, timeRule) {
  this.output.writeMessageBegin('onSchedule', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onSchedule_args();
  args.data_rule = data_rule;
  args.timeRule = timeRule;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onSchedule = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onSchedule_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onTick = function(tick) {
  this.send_onTick(tick);
  this.recv_onTick();
};

StrategyClient.prototype.send_onTick = function(tick) {
  this.output.writeMessageBegin('onTick', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onTick_args();
  args.tick = tick;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onTick = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onTick_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onBar = function(bar) {
  this.send_onBar(bar);
  this.recv_onBar();
};

StrategyClient.prototype.send_onBar = function(bar) {
  this.output.writeMessageBegin('onBar', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onBar_args();
  args.bar = bar;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onBar = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onBar_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onTrade = function(trade) {
  this.send_onTrade(trade);
  this.recv_onTrade();
};

StrategyClient.prototype.send_onTrade = function(trade) {
  this.output.writeMessageBegin('onTrade', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onTrade_args();
  args.trade = trade;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onTrade = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onTrade_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onPosition = function(position) {
  this.send_onPosition(position);
  this.recv_onPosition();
};

StrategyClient.prototype.send_onPosition = function(position) {
  this.output.writeMessageBegin('onPosition', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onPosition_args();
  args.position = position;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onPosition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onPosition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onAccount = function(accountStatus) {
  this.send_onAccount(accountStatus);
  this.recv_onAccount();
};

StrategyClient.prototype.send_onAccount = function(accountStatus) {
  this.output.writeMessageBegin('onAccount', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onAccount_args();
  args.accountStatus = accountStatus;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onAccount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onAccount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onOrder = function(orderStatus) {
  this.send_onOrder(orderStatus);
  this.recv_onOrder();
};

StrategyClient.prototype.send_onOrder = function(orderStatus) {
  this.output.writeMessageBegin('onOrder', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onOrder_args();
  args.orderStatus = orderStatus;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onOrder = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onOrder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onError = function() {
  this.send_onError();
  this.recv_onError();
};

StrategyClient.prototype.send_onError = function() {
  this.output.writeMessageBegin('onError', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onError_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onError = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onError_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
StrategyClient.prototype.onParameter = function() {
  this.send_onParameter();
  this.recv_onParameter();
};

StrategyClient.prototype.send_onParameter = function() {
  this.output.writeMessageBegin('onParameter', Thrift.MessageType.CALL, this.seqid);
  var args = new Strategy_onParameter_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

StrategyClient.prototype.recv_onParameter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Strategy_onParameter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
