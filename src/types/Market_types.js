//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Tick = function(args) {
  this.symbol = null;
  this.exchange = null;
  this.name = null;
  this.timestamp = null;
  this.preClosePrice = null;
  this.lastPrice = null;
  this.openPrice = null;
  this.highPrice = null;
  this.lowPrice = null;
  this.volume = null;
  this.amount = null;
  this.askPrices = null;
  this.askVolumes = null;
  this.bidPrices = null;
  this.bidVolumes = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.exchange !== undefined) {
      this.exchange = args.exchange;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.preClosePrice !== undefined) {
      this.preClosePrice = args.preClosePrice;
    }
    if (args.lastPrice !== undefined) {
      this.lastPrice = args.lastPrice;
    }
    if (args.openPrice !== undefined) {
      this.openPrice = args.openPrice;
    }
    if (args.highPrice !== undefined) {
      this.highPrice = args.highPrice;
    }
    if (args.lowPrice !== undefined) {
      this.lowPrice = args.lowPrice;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.amount !== undefined) {
      this.amount = args.amount;
    }
    if (args.askPrices !== undefined) {
      this.askPrices = args.askPrices;
    }
    if (args.askVolumes !== undefined) {
      this.askVolumes = args.askVolumes;
    }
    if (args.bidPrices !== undefined) {
      this.bidPrices = args.bidPrices;
    }
    if (args.bidVolumes !== undefined) {
      this.bidVolumes = args.bidVolumes;
    }
  }
};
Tick.prototype = {};
Tick.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.exchange = new Exchange();
        this.exchange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.preClosePrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lastPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.openPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.highPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowPrice = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.askPrices = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readDouble().value;
          this.askPrices.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.askVolumes = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32().value;
          this.askVolumes.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.bidPrices = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readDouble().value;
          this.bidPrices.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.bidVolumes = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI32().value;
          this.bidVolumes.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tick.prototype.write = function(output) {
  output.writeStructBegin('Tick');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.exchange !== null && this.exchange !== undefined) {
    output.writeFieldBegin('exchange', Thrift.Type.STRUCT, 2);
    this.exchange.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.preClosePrice !== null && this.preClosePrice !== undefined) {
    output.writeFieldBegin('preClosePrice', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.preClosePrice);
    output.writeFieldEnd();
  }
  if (this.lastPrice !== null && this.lastPrice !== undefined) {
    output.writeFieldBegin('lastPrice', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.lastPrice);
    output.writeFieldEnd();
  }
  if (this.openPrice !== null && this.openPrice !== undefined) {
    output.writeFieldBegin('openPrice', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.openPrice);
    output.writeFieldEnd();
  }
  if (this.highPrice !== null && this.highPrice !== undefined) {
    output.writeFieldBegin('highPrice', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.highPrice);
    output.writeFieldEnd();
  }
  if (this.lowPrice !== null && this.lowPrice !== undefined) {
    output.writeFieldBegin('lowPrice', Thrift.Type.DOUBLE, 14);
    output.writeDouble(this.lowPrice);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 15);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 16);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.askPrices !== null && this.askPrices !== undefined) {
    output.writeFieldBegin('askPrices', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.DOUBLE, this.askPrices.length);
    for (var iter28 in this.askPrices)
    {
      if (this.askPrices.hasOwnProperty(iter28))
      {
        iter28 = this.askPrices[iter28];
        output.writeDouble(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.askVolumes !== null && this.askVolumes !== undefined) {
    output.writeFieldBegin('askVolumes', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.I32, this.askVolumes.length);
    for (var iter29 in this.askVolumes)
    {
      if (this.askVolumes.hasOwnProperty(iter29))
      {
        iter29 = this.askVolumes[iter29];
        output.writeI32(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bidPrices !== null && this.bidPrices !== undefined) {
    output.writeFieldBegin('bidPrices', Thrift.Type.LIST, 23);
    output.writeListBegin(Thrift.Type.DOUBLE, this.bidPrices.length);
    for (var iter30 in this.bidPrices)
    {
      if (this.bidPrices.hasOwnProperty(iter30))
      {
        iter30 = this.bidPrices[iter30];
        output.writeDouble(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bidVolumes !== null && this.bidVolumes !== undefined) {
    output.writeFieldBegin('bidVolumes', Thrift.Type.LIST, 24);
    output.writeListBegin(Thrift.Type.I32, this.bidVolumes.length);
    for (var iter31 in this.bidVolumes)
    {
      if (this.bidVolumes.hasOwnProperty(iter31))
      {
        iter31 = this.bidVolumes[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

