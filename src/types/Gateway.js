//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Gateway_initialize_args = function(args) {
};
Gateway_initialize_args.prototype = {};
Gateway_initialize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_initialize_args.prototype.write = function(output) {
  output.writeStructBegin('Gateway_initialize_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_initialize_result = function(args) {
};
Gateway_initialize_result.prototype = {};
Gateway_initialize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_initialize_result.prototype.write = function(output) {
  output.writeStructBegin('Gateway_initialize_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_connect_args = function(args) {
};
Gateway_connect_args.prototype = {};
Gateway_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_connect_args.prototype.write = function(output) {
  output.writeStructBegin('Gateway_connect_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_connect_result = function(args) {
};
Gateway_connect_result.prototype = {};
Gateway_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_connect_result.prototype.write = function(output) {
  output.writeStructBegin('Gateway_connect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_close_args = function(args) {
};
Gateway_close_args.prototype = {};
Gateway_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_close_args.prototype.write = function(output) {
  output.writeStructBegin('Gateway_close_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_close_result = function(args) {
};
Gateway_close_result.prototype = {};
Gateway_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_close_result.prototype.write = function(output) {
  output.writeStructBegin('Gateway_close_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_sendOrder_args = function(args) {
  this.symbol = null;
  this.price = null;
  this.volume = null;
  this.side = null;
  this.tradeType = null;
  this.priceType = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.volume !== undefined) {
      this.volume = args.volume;
    }
    if (args.side !== undefined) {
      this.side = args.side;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
  }
};
Gateway_sendOrder_args.prototype = {};
Gateway_sendOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.volume = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.side = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_sendOrder_args.prototype.write = function(output) {
  output.writeStructBegin('Gateway_sendOrder_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.I32, 3);
    output.writeI32(this.volume);
    output.writeFieldEnd();
  }
  if (this.side !== null && this.side !== undefined) {
    output.writeFieldBegin('side', Thrift.Type.I32, 4);
    output.writeI32(this.side);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 5);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 6);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_sendOrder_result = function(args) {
  this.success = null;
  this.orderException = null;
  if (args instanceof OrderException) {
    this.orderException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.orderException !== undefined) {
      this.orderException = args.orderException;
    }
  }
};
Gateway_sendOrder_result.prototype = {};
Gateway_sendOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.orderException = new OrderException();
        this.orderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_sendOrder_result.prototype.write = function(output) {
  output.writeStructBegin('Gateway_sendOrder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.orderException !== null && this.orderException !== undefined) {
    output.writeFieldBegin('orderException', Thrift.Type.STRUCT, 1);
    this.orderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_cancelOrder_args = function(args) {
  this.orderID = null;
  if (args) {
    if (args.orderID !== undefined) {
      this.orderID = args.orderID;
    }
  }
};
Gateway_cancelOrder_args.prototype = {};
Gateway_cancelOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_cancelOrder_args.prototype.write = function(output) {
  output.writeStructBegin('Gateway_cancelOrder_args');
  if (this.orderID !== null && this.orderID !== undefined) {
    output.writeFieldBegin('orderID', Thrift.Type.STRING, 1);
    output.writeString(this.orderID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gateway_cancelOrder_result = function(args) {
  this.orderException = null;
  if (args instanceof OrderException) {
    this.orderException = args;
    return;
  }
  if (args) {
    if (args.orderException !== undefined) {
      this.orderException = args.orderException;
    }
  }
};
Gateway_cancelOrder_result.prototype = {};
Gateway_cancelOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.orderException = new OrderException();
        this.orderException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway_cancelOrder_result.prototype.write = function(output) {
  output.writeStructBegin('Gateway_cancelOrder_result');
  if (this.orderException !== null && this.orderException !== undefined) {
    output.writeFieldBegin('orderException', Thrift.Type.STRUCT, 1);
    this.orderException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GatewayClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
GatewayClient.prototype = {};
GatewayClient.prototype.initialize = function() {
  this.send_initialize();
  this.recv_initialize();
};

GatewayClient.prototype.send_initialize = function() {
  this.output.writeMessageBegin('initialize', Thrift.MessageType.CALL, this.seqid);
  var args = new Gateway_initialize_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

GatewayClient.prototype.recv_initialize = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gateway_initialize_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
GatewayClient.prototype.connect = function() {
  this.send_connect();
  this.recv_connect();
};

GatewayClient.prototype.send_connect = function() {
  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);
  var args = new Gateway_connect_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

GatewayClient.prototype.recv_connect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gateway_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
GatewayClient.prototype.close = function() {
  this.send_close();
  this.recv_close();
};

GatewayClient.prototype.send_close = function() {
  this.output.writeMessageBegin('close', Thrift.MessageType.CALL, this.seqid);
  var args = new Gateway_close_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

GatewayClient.prototype.recv_close = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gateway_close_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
GatewayClient.prototype.sendOrder = function(symbol, price, volume, side, tradeType, priceType) {
  this.send_sendOrder(symbol, price, volume, side, tradeType, priceType);
  return this.recv_sendOrder();
};

GatewayClient.prototype.send_sendOrder = function(symbol, price, volume, side, tradeType, priceType) {
  this.output.writeMessageBegin('sendOrder', Thrift.MessageType.CALL, this.seqid);
  var args = new Gateway_sendOrder_args();
  args.symbol = symbol;
  args.price = price;
  args.volume = volume;
  args.side = side;
  args.tradeType = tradeType;
  args.priceType = priceType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

GatewayClient.prototype.recv_sendOrder = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gateway_sendOrder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.orderException) {
    throw result.orderException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendOrder failed: unknown result';
};
GatewayClient.prototype.cancelOrder = function(orderID) {
  this.send_cancelOrder(orderID);
  this.recv_cancelOrder();
};

GatewayClient.prototype.send_cancelOrder = function(orderID) {
  this.output.writeMessageBegin('cancelOrder', Thrift.MessageType.CALL, this.seqid);
  var args = new Gateway_cancelOrder_args();
  args.orderID = orderID;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

GatewayClient.prototype.recv_cancelOrder = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gateway_cancelOrder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.orderException) {
    throw result.orderException;
  }
  return;
};
