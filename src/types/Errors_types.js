//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


OrderErrorCode = {
'UNKNOWN' : 0,
'UNSUPPORTED_PRICE_TYPE' : 1,
'BAD_DATA_FORMAT' : 2
};
RiskLevel = {
'NORMAL' : 1,
'WARNING' : 2,
'FORBIDDEN' : 3
};
OrderException = function(args) {
  this.errorCode = null;
  this.message = null;
  this.rateLimitDuration = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.rateLimitDuration !== undefined) {
      this.rateLimitDuration = args.rateLimitDuration;
    }
  }
};
Thrift.inherits(OrderException, Thrift.TException);
OrderException.prototype.name = 'OrderException';
OrderException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rateLimitDuration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderException.prototype.write = function(output) {
  output.writeStructBegin('OrderException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.rateLimitDuration !== null && this.rateLimitDuration !== undefined) {
    output.writeFieldBegin('rateLimitDuration', Thrift.Type.I32, 3);
    output.writeI32(this.rateLimitDuration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RiskException = function(args) {
};
Thrift.inherits(RiskException, Thrift.TException);
RiskException.prototype.name = 'RiskException';
RiskException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RiskException.prototype.write = function(output) {
  output.writeStructBegin('RiskException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeException = function(args) {
};
Thrift.inherits(SubscribeException, Thrift.TException);
SubscribeException.prototype.name = 'SubscribeException';
SubscribeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeException.prototype.write = function(output) {
  output.writeStructBegin('SubscribeException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

